// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NodeBin component renders ok 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Connect(Droppable)
    acceptsDraggableType="EXISTING_NODE"
    dispatch={[Function]}
    droppableName="NODE_BIN"
    isDraggableDeleteable={false}
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
/>,
  "nodes": Array [
    <Connect(Droppable)
      acceptsDraggableType="EXISTING_NODE"
      dispatch={[Function]}
      droppableName="NODE_BIN"
      isDraggableDeleteable={false}
      store={
            Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                }
      }
/>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Connect(Connect(Droppable))
        store={
                Object {
                        "dispatch": [Function],
                        "getState": [Function],
                        "replaceReducer": [Function],
                        "subscribe": [Function],
                        Symbol(observable): [Function],
                      }
        }
/>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Connect {
        "_reactInternalInstance": [Circular],
        "context": Object {
          "store": undefined,
        },
        "dispatchProps": Object {
          "dispatch": [Function],
        },
        "doDispatchPropsDependOnOwnProps": false,
        "doStatePropsDependOnOwnProps": false,
        "finalMapDispatchToProps": [Function],
        "finalMapStateToProps": [Function],
        "hasStoreStateChanged": false,
        "haveOwnPropsChanged": false,
        "haveStatePropsBeenPrecalculated": false,
        "mergedProps": Object {
          "acceptsDraggableType": "EXISTING_NODE",
          "dispatch": [Function],
          "droppableName": "NODE_BIN",
          "isDraggableDeleteable": false,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "props": Object {
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
        "renderedElement": <Connect(Droppable)
          acceptsDraggableType="EXISTING_NODE"
          dispatch={[Function]}
          droppableName="NODE_BIN"
          isDraggableDeleteable={false}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
/>,
        "state": Object {
          "storeState": Object {
            "draggable": Object {
              "draggableType": "NODE",
              "isDragging": true,
            },
          },
        },
        "stateProps": Object {
          "acceptsDraggableType": "EXISTING_NODE",
          "droppableName": "NODE_BIN",
          "isDraggableDeleteable": false,
        },
        "statePropsPrecalculationError": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
        "version": 0,
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Connect(Droppable)
          acceptsDraggableType="EXISTING_NODE"
          dispatch={[Function]}
          droppableName="NODE_BIN"
          isDraggableDeleteable={false}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
/>,
        "_debugID": 2,
        "_renderedOutput": <Connect(Droppable)
          acceptsDraggableType="EXISTING_NODE"
          dispatch={[Function]}
          droppableName="NODE_BIN"
          isDraggableDeleteable={false}
          store={
                    Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            }
          }
/>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Connect(Connect(Droppable))
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
    }
/>,
}
`;
