// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NodeLayout /> renders ok 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NodeLayout
    allowHighlighting={false}
    allowPositioning={false}
    allowSelect={true}
    canCreateEdge={false}
    canHighlight={false}
    concentricCircles={0}
    createEdge="bar"
    displayEdges={Array []}
    height={456}
    highlightAttributes={Object {}}
    layoutVariable="foo"
    nodes={
      Array [
        Object {
          "_uid": 123,
          "bar": "buzz",
          "foo": Object {
            "x": 0,
            "y": 0,
          },
        },
      ]
    }
    selectMode=""
    skewedTowardCenter={false}
    sortOrder={Array []}
    toggleEdge={[Function]}
    toggleHighlight={[Function]}
    updateNode={[Function]}
    width={123}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <LayoutNode
          allowPositioning={false}
          allowSelect={true}
          areaHeight={456}
          areaWidth={123}
          layoutVariable="foo"
          linking={false}
          node={
            Object {
              "_uid": 123,
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
            }
          }
          onSelected={[Function]}
          selected={false}
        />,
      ],
      "className": "node-layout",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "123",
        "nodeType": "class",
        "props": Object {
          "allowPositioning": false,
          "allowSelect": true,
          "areaHeight": 456,
          "areaWidth": 123,
          "layoutVariable": "foo",
          "linking": false,
          "node": Object {
            "_uid": 123,
            "bar": "buzz",
            "foo": Object {
              "x": 0,
              "y": 0,
            },
          },
          "onSelected": [Function],
          "selected": false,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <LayoutNode
            allowPositioning={false}
            allowSelect={true}
            areaHeight={456}
            areaWidth={123}
            layoutVariable="foo"
            linking={false}
            node={
              Object {
                "_uid": 123,
                "bar": "buzz",
                "foo": Object {
                  "x": 0,
                  "y": 0,
                },
              }
            }
            onSelected={[Function]}
            selected={false}
          />,
        ],
        "className": "node-layout",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "123",
          "nodeType": "class",
          "props": Object {
            "allowPositioning": false,
            "allowSelect": true,
            "areaHeight": 456,
            "areaWidth": 123,
            "layoutVariable": "foo",
            "linking": false,
            "node": Object {
              "_uid": 123,
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
            },
            "onSelected": [Function],
            "selected": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
