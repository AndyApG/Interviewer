// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NodeForm /> should render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <NodeForm
    closeModal={[Function]}
    entity="node"
    fields={
      Array [
        Object {
          "component": "TextInput",
          "variable": "foo",
        },
      ]
    }
    initialValues={Object {}}
    name="baz"
    node={Object {}}
    onSubmit={[Function]}
    openModal={[Function]}
    resetValues={[Function]}
    showAddAnotherToggle={false}
    title="The form title"
    type="person"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": <Connect(AutoInitialisedForm)
        autoFocus={true}
        closeModal={[Function]}
        controls={
          Array [
            false,
            <Button
              aria-label="Submit"
              color=""
              content=""
              icon=""
              iconPosition="right"
              onClick={[Function]}
              size=""
            >
              Finished
            </Button>,
          ]
        }
        entity="node"
        fields={
          Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ]
        }
        form="baz"
        initialValues={Object {}}
        name="baz"
        node={Object {}}
        onSubmit={[Function]}
        openModal={[Function]}
        resetValues={[Function]}
        showAddAnotherToggle={false}
        title="The form title"
        type="person"
      />,
      "className": "",
      "name": "baz",
      "title": "The form title",
    },
    "ref": Object {
      "current": null,
    },
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "autoFocus": true,
        "closeModal": [Function],
        "controls": Array [
          false,
          <Button
            aria-label="Submit"
            color=""
            content=""
            icon=""
            iconPosition="right"
            onClick={[Function]}
            size=""
          >
            Finished
          </Button>,
        ],
        "entity": "node",
        "fields": Array [
          Object {
            "component": "TextInput",
            "variable": "foo",
          },
        ],
        "form": "baz",
        "initialValues": Object {},
        "name": "baz",
        "node": Object {},
        "onSubmit": [Function],
        "openModal": [Function],
        "resetValues": [Function],
        "showAddAnotherToggle": false,
        "title": "The form title",
        "type": "person",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": <Connect(AutoInitialisedForm)
          autoFocus={true}
          closeModal={[Function]}
          controls={
            Array [
              false,
              <Button
                aria-label="Submit"
                color=""
                content=""
                icon=""
                iconPosition="right"
                onClick={[Function]}
                size=""
              >
                Finished
              </Button>,
            ]
          }
          entity="node"
          fields={
            Array [
              Object {
                "component": "TextInput",
                "variable": "foo",
              },
            ]
          }
          form="baz"
          initialValues={Object {}}
          name="baz"
          node={Object {}}
          onSubmit={[Function]}
          openModal={[Function]}
          resetValues={[Function]}
          showAddAnotherToggle={false}
          title="The form title"
          type="person"
        />,
        "className": "",
        "name": "baz",
        "title": "The form title",
      },
      "ref": Object {
        "current": null,
      },
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "autoFocus": true,
          "closeModal": [Function],
          "controls": Array [
            false,
            <Button
              aria-label="Submit"
              color=""
              content=""
              icon=""
              iconPosition="right"
              onClick={[Function]}
              size=""
            >
              Finished
            </Button>,
          ],
          "entity": "node",
          "fields": Array [
            Object {
              "component": "TextInput",
              "variable": "foo",
            },
          ],
          "form": "baz",
          "initialValues": Object {},
          "name": "baz",
          "node": Object {},
          "onSubmit": [Function],
          "openModal": [Function],
          "resetValues": [Function],
          "showAddAnotherToggle": false,
          "title": "The form title",
          "type": "person",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
