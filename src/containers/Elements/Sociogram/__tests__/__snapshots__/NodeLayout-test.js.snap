// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<NodeLayout /> renders ok 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className="node-layout"
  >
    <LayoutNode
      allowPositioning={false}
      allowSelect={true}
      areaHeight={456}
      areaWidth={123}
      layoutVariable="foo"
      node={
        Object {
          "bar": "buzz",
          "foo": Object {
            "x": 0,
            "y": 0,
          },
          "uid": 123,
        }
      }
      onSelected={[Function]}
      selected={true}
    />
  </div>,
  "nodes": Array [
    <div
      className="node-layout"
    >
      <LayoutNode
        allowPositioning={false}
        allowSelect={true}
        areaHeight={456}
        areaWidth={123}
        layoutVariable="foo"
        node={
          Object {
            "bar": "buzz",
            "foo": Object {
              "x": 0,
              "y": 0,
            },
            "uid": 123,
          }
        }
        onSelected={[Function]}
        selected={true}
      />
    </div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <NodeLayout
        allowHighlighting={false}
        allowPositioning={false}
        allowSelect={true}
        canCreateEdge={false}
        canHighlight={false}
        concentricCircles={0}
        createEdge="bar"
        displayEdges={Array []}
        height={456}
        highlightAttributes={Object {}}
        layoutVariable="foo"
        nodeBinSortOrder={Object {}}
        nodes={
          Array [
            Object {
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
              "uid": 123,
            },
          ]
        }
        selectMode=""
        skewedTowardCenter={false}
        toggleEdge={[Function]}
        toggleHighlight={[Function]}
        updateNode={[Function]}
        width={123}
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": NodeLayout {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "onSelected": [Function],
        "props": Object {
          "allowHighlighting": false,
          "allowPositioning": false,
          "allowSelect": true,
          "canCreateEdge": false,
          "canHighlight": false,
          "concentricCircles": 0,
          "createEdge": "bar",
          "displayEdges": Array [],
          "height": 456,
          "highlightAttributes": Object {},
          "layoutVariable": "foo",
          "nodeBinSortOrder": Object {},
          "nodes": Array [
            Object {
              "bar": "buzz",
              "foo": Object {
                "x": 0,
                "y": 0,
              },
              "uid": 123,
            },
          ],
          "selectMode": "",
          "skewedTowardCenter": false,
          "toggleEdge": [Function],
          "toggleHighlight": [Function],
          "updateNode": [Function],
          "width": 123,
        },
        "refs": Object {},
        "state": Object {
          "connectFrom": null,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className="node-layout"
        >
          <LayoutNode
            allowPositioning={false}
            allowSelect={true}
            areaHeight={456}
            areaWidth={123}
            layoutVariable="foo"
            node={
              Object {
                "bar": "buzz",
                "foo": Object {
                  "x": 0,
                  "y": 0,
                },
                "uid": 123,
              }
            }
            onSelected={[Function]}
            selected={true}
          />
        </div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className="node-layout"
        >
          <LayoutNode
            allowPositioning={false}
            allowSelect={true}
            areaHeight={456}
            areaWidth={123}
            layoutVariable="foo"
            node={
              Object {
                "bar": "buzz",
                "foo": Object {
                  "x": 0,
                  "y": 0,
                },
                "uid": 123,
              }
            }
            onSelected={[Function]}
            selected={true}
          />
        </div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <NodeLayout
    allowHighlighting={false}
    allowPositioning={false}
    allowSelect={true}
    canCreateEdge={false}
    canHighlight={false}
    concentricCircles={0}
    createEdge="bar"
    displayEdges={Array []}
    height={456}
    highlightAttributes={Object {}}
    layoutVariable="foo"
    nodeBinSortOrder={Object {}}
    nodes={
      Array [
        Object {
          "bar": "buzz",
          "foo": Object {
            "x": 0,
            "y": 0,
          },
          "uid": 123,
        },
      ]
    }
    selectMode=""
    skewedTowardCenter={false}
    toggleEdge={[Function]}
    toggleHighlight={[Function]}
    updateNode={[Function]}
    width={123}
  />,
}
`;
