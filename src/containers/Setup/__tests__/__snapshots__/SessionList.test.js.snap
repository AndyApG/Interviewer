// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SessionList /> renders ok 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(SessionList)
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "getSessionPath": [Function],
      "loadSession": [Function],
      "protocolData": Object {},
      "removeSession": [Function],
      "sessions": Object {
        "a": Object {
          "name": "a name",
          "network": Object {
            "edges": Array [
              0,
            ],
            "nodes": Array [
              0,
              1,
              2,
            ],
          },
          "path": "/path/to/a",
          "promptIndex": 2,
          "protocolPath": "p",
          "updatedAt": 1528213062793,
        },
        "b": Object {
          "name": "b name",
          "network": Object {
            "edges": Array [],
            "nodes": Array [],
          },
          "path": "/path/to/b",
          "promptIndex": 1,
          "protocolPath": "p",
          "updatedAt": 1528218451710,
        },
      },
      "setSession": [Function],
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "getSessionPath": [Function],
        "loadSession": [Function],
        "protocolData": Object {},
        "removeSession": [Function],
        "sessions": Object {
          "a": Object {
            "name": "a name",
            "network": Object {
              "edges": Array [
                0,
              ],
              "nodes": Array [
                0,
                1,
                2,
              ],
            },
            "path": "/path/to/a",
            "promptIndex": 2,
            "protocolPath": "p",
            "updatedAt": 1528213062793,
          },
          "b": Object {
            "name": "b name",
            "network": Object {
              "edges": Array [],
              "nodes": Array [],
            },
            "path": "/path/to/b",
            "promptIndex": 1,
            "protocolPath": "p",
            "updatedAt": 1528218451710,
          },
        },
        "setSession": [Function],
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
