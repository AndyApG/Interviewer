{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"length",
				"length-1"
			],
			[
				"getSim",
				"getSimpleEdge"
			],
			[
				"getSi",
				"getSimpleEdges"
			],
			[
				"get",
				"getLog"
			],
			[
				"node",
				"nodeProperties"
			],
			[
				"def",
				"defaultNodeRadius"
			],
			[
				"co",
				"coords"
			],
			[
				"ad",
				"addToLog"
			],
			[
				"kin",
				"kineticCanvas"
			],
			[
				"modal",
				"modal-base"
			],
			[
				"k",
				"kineticCanvas"
			],
			[
				"ed",
				"edgeLayer"
			],
			[
				"already",
				"alreadyExists"
			],
			[
				"remo",
				"removeEdge"
			],
			[
				"edge",
				"edgeLayer"
			],
			[
				"selec",
				"selectedNodes"
			],
			[
				"cir",
				"circleNumber"
			],
			[
				"current",
				"currentOpacity"
			],
			[
				"text",
				"text-align"
			],
			[
				"backg",
				"background-clip"
			],
			[
				"brand",
				"brand-primary"
			],
			[
				"me",
				"menu-item"
			],
			[
				"clear",
				"clearGraph"
			],
			[
				"create",
				"createRandomGraph"
			],
			[
				"Multit",
				"MultiTouch"
			],
			[
				"touch",
				"touchNumber"
			],
			[
				"font",
				"font-size"
			],
			[
				"getn",
				"getNodeByID"
			],
			[
				"from",
				"fromObj"
			],
			[
				"add",
				"addEdge"
			],
			[
				"x",
				"x"
			],
			[
				"simple",
				"simpleNodes"
			],
			[
				"simp",
				"simpleNodes"
			],
			[
				"sim",
				"simpleNodes"
			],
			[
				"cu",
				"cuOpacity"
			],
			[
				"cre",
				"createRandomGraph"
			],
			[
				"draw",
				"drawUIComponents"
			],
			[
				"first",
				"firsty"
			],
			[
				"fis",
				"firstx"
			],
			[
				"notifica",
				"notificationStyle"
			],
			[
				"no",
				"notificationStyle"
			],
			[
				"nofit",
				"notificationStyle"
			],
			[
				"y",
				"y"
			],
			[
				"uiL",
				"uiLayer"
			],
			[
				"buil",
				"buildNode"
			],
			[
				"opacity",
				"opacityIncrement"
			],
			[
				"mo",
				"moveToTop"
			],
			[
				"opa",
				"opacityIncrement"
			],
			[
				"b",
				"inline-block"
			],
			[
				"str",
				"strokeWidth"
			],
			[
				"set",
				"setStrokeWidth"
			],
			[
				"anim",
				"animSelected"
			],
			[
				"circle",
				"circleLayer"
			],
			[
				"ran",
				"randomFriend"
			],
			[
				"random",
				"randombetween"
			],
			[
				"z",
				"zoomDelta"
			]
		]
	},
	"buffers":
	[
		{
			"file": "less/style.less",
			"settings":
			{
				"buffer_size": 2852,
				"line_ending": "Unix"
			}
		},
		{
			"file": "less/variables.less",
			"settings":
			{
				"buffer_size": 25428,
				"line_ending": "Unix"
			}
		},
		{
			"file": "index.html",
			"settings":
			{
				"buffer_size": 3850,
				"line_ending": "Unix"
			}
		},
		{
			"file": "js/main.js",
			"settings":
			{
				"buffer_size": 2355,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// App declaration\n\nvar NetworkCanvas = function (options) {\n\n    // helper functions\n    var Notify = function(text, type){\n        if(settings.debug) {console.log(text);}\n    }\n\n    var randomBetween = function(min,max) {\n        return Math.random() * (max - min) + min;\n    }\n\n    Storage.prototype.setObject = function(key, value) {\n        this.setItem(key, JSON.stringify(value));\n    }\n\n    Storage.prototype.getObject = function(key) {\n        if (this.getItem(key) === null) {\n            Notify('Key not found in localStorage. Returning false.');\n            return false;\n        } else {\n            Notify('Key found in localStorage. Returning.');\n            var value = this.getItem(key);\n            return value && JSON.parse(value);            \n        }\n\n    }\n\n    // globals\n    var stage, newNodeBox, circleLayer, edgeLayer, nodeLayer, currentNode, selected, uiLayer, mySwiper,\n        app = this;\n        eventLog = new Array();\n        selectedNodes = [];\n\n    // Colours\n    var colors = [];\n    colors['blue'] = '#0174DF';\n    colors['edge'] = '#0174DF';\n\n    // Default settings\n    var defaultSettings = {\n        debug: true,\n        defaultNodeRadius: 18,\n        circleColor: '#ff0000',\n        circleNumber: 5,\n    }\n\n    var logEventMap = new Array('nodeMove','nodeTouch','edgeCreate','edgeDelete');\n\n    var settings = options || defaultSettings;\n\n    // Dummy Names\n    var namesList = new Array(\"Barney\",\"Jonathon\",\"Myles\",\"Alethia\",\"Tammera\",\"Veola\",\"Meredith\",\"Renee\",\"Grisel\",\"Celestina\",\"Fausto\",\"Eliana\",\"Raymundo\",\"Lyle\",\"Carry\",\"Kittie\",\"Melonie\",\"Elke\",\"Mattie\",\"Kieth\",\"Lourie\",\"Marcie\",\"Trinity\",\"Librada\",\"Lloyd\",\"Pearlie\",\"Velvet\",\"Stephan\",\"Hildegard\",\"Winfred\",\"Tempie\",\"Maybelle\",\"Melynda\",\"Tiera\",\"Lisbeth\",\"Kiera\",\"Gaye\",\"Edra\",\"Karissa\",\"Manda\",\"Ethelene\",\"Michelle\",\"Pamella\",\"Jospeh\",\"Tonette\",\"Maren\",\"Aundrea\",\"Madelene\",\"Epifania\",\"Olive\");\n\n    this.init = function () {\n        app.initKinetic();\n        app.drawUIComponents();\n        app.loadGraph();\n    }\n\n    this.addToLog = function(type,d,id) {\n        if (!d && !type) { return false; }\n\n        var date = +new Date();\n        var data = {};\n        data.timestamp = date;\n        data.eventType = type;\n        data.eventValue = d;\n        data.objectID = id;\n\n        eventLog.push(data);\n        Notify(\"Logged \"+data.eventType+\" on object \"+data.objectID+\" at time point \"+date);\n        return true;\n    }\n\n    this.getLog = function() {\n        return eventLog;\n    }\n\n    this.getLastEvent = function() {\n        return eventLog[eventLog.length-1];\n    }\n\n    this.addNode = function(coords, size, shape, label, id) {\n\n        // Placeholder for getting the number of nodes we have.\n        var nodes = app.getNodes();\n\n        // If we have an id, use that. if not, increment based on length of ndoes array.\n        // THIS IS NOT A SAFE ASSUMPTION!\n        var nodeNumber = id || nodes.length;\n\n        // if we don't have a label for the node, use a random one from the list.\n        // if we dont have a size, use the default node size.\n\n        var nodeProperties = {};\n\n        nodeProperties.coords = coords || new Array(Math.round(randomBetween(100,window.innerWidth-100)),Math.round(randomBetween(100,window.innerHeight-100)));\n        nodeProperties.size = size || settings.defaultNodeRadius;\n        nodeProperties.label = label || namesList[Math.round(randomBetween(0,namesList.length-1))];\n        nodeProperties.id = id || nodes.length;\n\n        var nodeGroup = new Kinetic.Group({\n            id: nodeProperties.id,\n            x: nodeProperties.coords[0],\n            y: nodeProperties.coords[1],\n            name: nodeProperties.label,\n            edges: [],\n            draggable: true,\n            dragDistance: 10,\n        });\n\n        var nodeCircle = new Kinetic.Circle({\n            radius: nodeProperties.size,\n            fill:colors['blue'],\n            strokeWidth: 0,\n        });\n\n        var nodeLabel = new Kinetic.Text({         \n            text: nodeProperties.label,\n            fontSize: 25,\n            fontFamily: 'Lato',\n            fill: 'white',\n            offsetX: -32,\n            offsetY:15,\n            fontStyle:100,\n\n        });\n\n        nodeGroup.add(nodeCircle);\n        nodeGroup.add(nodeLabel);\n\n        Notify(\"Putting node \"+nodeProperties.label+\" at coordinates x:\"+nodeProperties.coords[0]+\", y:\"+nodeProperties.coords[0], \"success\");\n        app.addToLog('nodeCreate', nodeProperties, nodeNumber); \n\n        nodeGroup.on('dragstart', function() {\n            Notify(\"dragstart\");\n\n            // Add the current position to the node attributes, so we know where it came from when we stop dragging.\n            this.attrs.oldx = this.attrs.x;\n            this.attrs.oldy = this.attrs.y;\n            var dragnode = this;\n            this.moveToTop();\n            nodeLayer.draw();\n        });\n\n\n        nodeGroup.on('dragmove', function(e) {\n            Notify(\"Dragmove\");\n            var dragNode = this;\n            $.each(edgeLayer.children, function(index, value) {\n                // value.setPoints([dragNode.getX(), dragNode.getY() ]);\n                if (value.attrs.from == dragNode || value.attrs.to == dragNode) {\n                    var points = [value.attrs.from.attrs.x,value.attrs.from.attrs.y,value.attrs.to.attrs.x,value.attrs.to.attrs.y];\n                    value.attrs.points = points;       \n                }\n            });\n            edgeLayer.draw();     \n\n        });    \n\n        nodeGroup.on('tap click', function(e) {\n            Notify('tap or click.');\n            this.moveToTop();\n            nodeLayer.draw();\n        }); \n    \n        nodeGroup.on('dbltap dblclick', function(e) {\n            Notify('double tap');\n\n            // Store this node in our special array for currently selected nodes.\n            selectedNodes.push(this);\n\n            // If this makes a couple, link them.\n            if(selectedNodes.length == 2) {\n                app.addEdge(selectedNodes[0],selectedNodes[1]);\n                selectedNodes[0].children[0].fill(colors['blue']);\n                selectedNodes[1].children[0].fill(colors['blue']);\n                selectedNodes = [];\n                nodeLayer.draw(); \n\n            } else {\n                // If not, simply turn the node red so we can see that it has been selected.\n                this.children[0].fill('red');\n                nodeLayer.draw();                \n            }\n\n        });      \n\n        nodeGroup.on('dragend', function() {\n            Notify('dragend');\n\n            // set the context\n            var dragNode = this;\n            var from = {};\n            var to = {};\n\n            // Fetch old position from properties populated by dragstart event.\n            from.x = this.attrs.oldx;\n            from.y = this.attrs.oldy;\n\n            to.x = this.attrs.x;\n            to.y = this.attrs.y;\n\n            // Add them to an event object for the logger.\n            var eventObject = {\n                from: from,\n                to: to,\n            }\n\n            // Log the movement and save the graph state.\n            app.addToLog('nodeMove',eventObject, this.attrs.id);\n            app.saveGraph();\n\n            // remove the attributes, just incase.\n            delete this.attrs.oldx;\n            delete this.attrs.oldy;\n\n        });\n\n        nodeLayer.add(nodeGroup);\n        nodeGroup.moveToBottom();\n        nodeLayer.draw();\n        app.saveGraph();\n        return nodeGroup;\n    }\n\n    this.getNodeByID = function(id) {\n        var node = {}\n        var nodes = app.getNodes();\n        $.each(nodes, function(index, value) {\n            if (value.attrs.id == id) {\n                node = value;\n            }\n        });\n\n        return node;\n    }\n\n    this.addEdge = function(from, to) {\n        var alreadyExists = false;\n        var fromObject,toObject;\n        var toRemove;\n\n        //TODO: Check if the nodes exist and return false if they don't.\n        //TODO: Make sure you cant add a self-loop\n\n        if (from != null && typeof from === 'object' || to != null && typeof to === 'object') {\n            fromObject = from;\n            toObject = to;\n\n        } else {\n            //assume we have ID's rather than the object, and so iterate through nodes looking for ID's.\n            fromObject = this.getNodeByID(from);\n            toObject = this.getNodeByID(to);\n        }\n\n        if (edgeLayer.children.length > 0) {\n            $.each(edgeLayer.children, function(index, value) {\n                if (value.attrs.from == fromObject && value.attrs.to == toObject || value.attrs.to == fromObject && value.attrs.from == toObject) {\n                    toRemove = value;\n                    alreadyExists = true;\n            }\n        });  \n\n        }\n\n        if (alreadyExists) {\n            this.removeEdge(toRemove);\n            return false;\n        }\n\n        var points = [fromObject.attrs.x, fromObject.attrs.y, toObject.attrs.x, toObject.attrs.y];\n        var edge = new Kinetic.Line({\n            // dashArray: [10, 10, 00, 10],\n            strokeWidth: 4,\n            stroke: colors['edge'],\n            // opacity: 0.8,\n            from: fromObject,\n            to: toObject,\n            points: points\n        });\n\n        edgeLayer.add(edge);\n        edgeLayer.draw(); \n        nodeLayer.draw();\n        Notify(\"Created Edge between \"+fromObject.children[1].attrs.text+\" and \"+toObject.children[1].attrs.text, \"success\");\n        \n        var simpleEdge = app.getSimpleEdge(edgeLayer.children.length-1);\n        app.addToLog('edgeCreate',simpleEdge, '0');\n        app.saveGraph();\n        return true;   \n    }\n\n    this.removeEdge = function(edge) {\n        Notify(\"Removing edge.\");\n        $.each(edgeLayer.children, function(index, value) {\n            if (value == edge) {\n                edgeLayer.children[index].remove();\n                edgeLayer.draw();\n            }\n        }); \n        app.addToLog('edgeRemove',properties, '0')\n        this.saveGraph();\n          \n    }    \n\n    this.getSimpleEdges = function() {\n        var simpleEdges = {}\n        var edgeCounter = 0;\n        $.each(edgeLayer.children, function(index, value) {\n            simpleEdges[edgeCounter] = {};\n            simpleEdges[edgeCounter].from = value.attrs.from.attrs.id;\n            simpleEdges[edgeCounter].to = value.attrs.to.attrs.id;\n            edgeCounter++;\n        });\n\n        return simpleEdges;\n    }\n\n    this.getSimpleEdge = function(id) {\n        var simpleEdges = app.getSimpleEdges();\n        if (!id) { return false; }\n\n        var simpleEdge = simpleEdges[id];\n        return simpleEdge;\n    }\n\n    this.getEdgeLayer = function() {\n        return edgeLayer;\n    }\n\n    this.initKinetic = function () {\n        // Initialise KineticJS stage\n        stage = new Kinetic.Stage({\n            container: 'kineticCanvas',\n            width: window.innerWidth,\n            height: window.innerHeight\n        });\n\n        circleLayer = new Kinetic.Layer();\n        nodeLayer = new Kinetic.Layer();\n        edgeLayer = new Kinetic.Layer();\n        uiLayer = new Kinetic.Layer();\n\n        stage.add(circleLayer);\n        stage.add(edgeLayer);\n        stage.add(nodeLayer);\n        stage.add(uiLayer);\n    }\n\n    this.loadGraph = function () {\n        // TODO: Add return false for if this fails.\n        Notify(\"Loading graph from localStorage.\");\n        loadedNodes = localStorage.getObject('nodes') || {};\n        loadedEdges = localStorage.getObject('edges') || {};\n        $.each(loadedNodes, function (index, value) {\n            var coords = [];\n            coords.push(value.x);\n            coords.push(value.y);\n            var label = value.name;\n            app.addNode(coords,null,null,label);\n        });\n\n        $.each(loadedEdges, function (index, value) {\n            app.addEdge(value.from,value.to);\n        });\n    }\n\n    this.saveGraph = function () {\n        Notify(\"Saving graph.\");\n        simpleNodes = app.getSimpleNodes();\n        simpleEdges = app.getSimpleEdges();\n        log = app.getLog();\n        localStorage.setObject('nodes', simpleNodes); \n        localStorage.setObject('edges', simpleEdges);\n        localStorage.setObject('log', log);\n    }\n\n    this.getNodes = function() {\n        return nodeLayer.children;\n    }\n\n    this.getEdges = function() {\n        return edgeLayer.children;\n    }    \n\n    this.getSimpleNodes = function() {\n        // We need to create a simple representation of the nodes for storing.\n        var simpleNodes = new Object();\n        var nodes = app.getNodes();\n        $.each(nodes, function (index, value) {\n            simpleNodes[value.attrs.id] = {};\n            simpleNodes[value.attrs.id].x = value.attrs.x;\n            simpleNodes[value.attrs.id].y = value.attrs.y;\n            simpleNodes[value.attrs.id].name = value.attrs.name;\n        });\n        return simpleNodes;\n    }\n\n    this.drawUIComponents = function () {\n\n        // Draw all UI components\n        var circleFills, circleLines;\n        var currentColor = settings.circleColor ;\n        var totalHeight = window.innerHeight-(settings.defaultNodeRadius *  2); // Our canvas area is the window height minus twice the node radius (for spacing)\n        var currentOpacity = 0.1;\n        \n        //draw concentric circles\n        for(i = 0; i < settings.circleNumber; i++) {\n            var ratio = 1-(i/settings.circleNumber);\n            var currentRadius = (totalHeight/2 * ratio);\n      \n            var circleLines = new Kinetic.Circle({\n                x: window.innerWidth / 2,\n                y: window.innerHeight / 2,\n                radius: currentRadius,\n                stroke: 'white',\n                strokeWidth: 1.5,\n                opacity: 0\n            });\n\n            var circleFills = new Kinetic.Circle({\n                x: window.innerWidth / 2,\n                y: window.innerHeight / 2,\n                radius: currentRadius,\n                fill: currentColor,\n                opacity: currentOpacity,\n                strokeWidth: 0,\n            });\n\n            // currentColor = tinycolor.darken(currentColor, amount = 15).toHexString();\n            currentOpacity = currentOpacity+((0.3-currentOpacity)/settings.circleNumber);        \n            circleLayer.add(circleFills); \n            circleLayer.add(circleLines);\n\n      }\n\n      // create a new node box\n      var newNodeBox = new Kinetic.Circle({\n            radius: 50,\n            stroke: '#666',\n            strokeWidth: 0,\n            y: window.innerHeight - 100,\n            x: 100,\n      });\n\n      newNodeBox.on('click tap', function() {\n          var touchPos = stage.getPointerPosition();\n          var coords = new Array();\n          coords[0] = touchPos.x;\n          coords[1] = touchPos.y;\n          Notify(coords);\n          var created = app.addNode(coords);\n          newNodeBox.moveToBottom();\n          uiLayer.draw();\n      });\n\n      uiLayer.add(newNodeBox);\n\n      circleLayer.draw();\n      uiLayer.draw();\n\n    }\n\n    this.clearGraph = function() {\n        edgeLayer.removeChildren();\n        edgeLayer.clear();\n        nodeLayer.removeChildren();\n        nodeLayer.clear();\n        app.saveGraph();\n    }\n\n    this.createRandomGraph = function(nodeCount,edgeProbability) {\n        nodeCount = nodeCount || 10;\n        edgeProbability = edgeProbability || 0.4;\n\n        Notify(\"Creating random graph...\");\n        for (i=0;i<nodeCount;i++) {\n            var current = i+1;\n            Notify(\"Adding node \"+current+\" of \"+nodeCount);\n            app.addNode();\n            \n        }\n\n        Notify(\"Adding edges.\");\n        var nodes = app.getNodes(); \n        $.each(nodes, function (index, value) {\n            if (randomBetween(0, 1) < edgeProbability) {\n                var randomFriend = Math.round(randomBetween(0,nodes.length-1));\n                app.addEdge(nodes[index],nodes[randomFriend]);\n                 \n            }\n        });\n    }\n    app.init();\n    \n\n};",
			"file": "js/NetworkCanvas.js",
			"file_size": 15897,
			"file_write_time": 1395913112000000,
			"settings":
			{
				"buffer_size": 15948,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<h1>Yo</h1>",
			"file": "/Users/joshua/Sites/anotherverse/index.html",
			"file_size": 11,
			"file_write_time": 1397816744000000,
			"settings":
			{
				"buffer_size": 11,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Applications/MAMP/htdocs/wp-content/themes/GeoNetTheme/mapping-page.php",
			"settings":
			{
				"buffer_size": 1991,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 47.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/joshua/Sites/netCanvas/components/kineticjs/kinetic.js",
		"/Users/joshua/Sites/netCanvas/js/main.min.js",
		"/Users/joshua/Sites/netCanvas/js/NetworkCanvas.js",
		"/Users/joshua/Sites/netCanvas/js/main.js",
		"/Users/joshua/Sites/netCanvas/javascripts/main.js",
		"/Users/joshua/Sites/netCanvas/bower.json",
		"/Users/joshua/Sites/netCanvas/.bowerrc",
		"/Users/joshua/Sites/KineticMT/example/example.js",
		"/Users/joshua/Sites/netCanvas/js/Kinetic.MultiTouch.js",
		"/Users/joshua/Sites/netCanvas/externals/kinetic/src/Stage.js",
		"/Users/joshua/Sites/netCanvas/js/kinetic.min.js",
		"/Users/joshua/Documents/Vuze Downloads/Adobe Acrobat XI Pro 11.0.3 Multilanguage Mac OS X [ChingLiu]/Crack-OSX/install.txt",
		"/Users/joshua/Documents/Vuze Downloads/Adobe Acrobat XI Pro 11.0.3 Multilanguage Mac OS X [ChingLiu]/ChingLiu.Install.Notes.txt",
		"/Applications/MAMP/htdocs/wp-content/themes/geo2-experimental/js/main.js",
		"/Users/joshua/Sites/netCanvas/externals/kinetic/src/Animation.js",
		"/Users/joshua/Sites/netCanvas/externals/kinetic/src/DragAndDrop.js",
		"/Users/joshua/Sites/netCanvas/externals/kinetic/src/Factory.js",
		"/Users/joshua/Sites/KineticJS/src/DragAndDrop.js",
		"/Users/joshua/Sites/KineticJS/kinetic.js",
		"/Users/joshua/Sites/Kinetic.MultiTouch/example/example.js",
		"/Users/joshua/Sites/KineticMT/example/kinetic.min.js",
		"/Users/joshua/Sites/Kinetic.MultiTouch/Kinetic.MultiTouch.js",
		"/Users/joshua/Sites/Kinetic.MultiTouch/example/index.html",
		"/Users/joshua/Sites/netCanvas/externals/kinetic/kinetic.js",
		"/Users/joshua/Sites/netCanvas/.gitmodules",
		"/Users/joshua/Sites/ghost-openshift/content/themes/ghostwriter/index.hbs",
		"/Users/joshua/Sites/ghost-openshift/content/themes/casper/index.hbs",
		"/Users/joshua/Sites/ghost-openshift/config.js",
		"/Users/joshua/Sites/ghost-openshift/core/built/scripts/ghost.js",
		"/Users/joshua/Sites/ghost-openshift/core/built/scripts/ghost.min.js",
		"/Users/joshua/Sites/ghost-openshift/core/index.js",
		"/Users/joshua/Sites/ghost-openshift/core/server.js",
		"/Users/joshua/Sites/ghost-openshift/index.js",
		"/Users/joshua/Sites/ghost-openshift/Gruntfile.js",
		"/Users/joshua/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/joshua/Sites/android_geo/www/js/main.js",
		"/Users/joshua/Sites/netCanvas/index.html",
		"/Users/joshua/Sites/netCanvas/less/variables.less",
		"/Users/joshua/Sites/netCanvas/networkcanvas.html",
		"/Users/joshua/Sites/netCanvas/js/bootstrap/js/bootstrap.js",
		"/Users/joshua/Sites/netCanvas/js/bootstrap-notify.js",
		"/Users/joshua/Sites/netCanvas/externals/bootstrap/package.json",
		"/Users/joshua/Sites/netCanvas/css/alertify.bootstrap.css",
		"/Users/joshua/Sites/android_geo/www/index.html",
		"/Users/joshua/Sites/netCanvas/css/idangerous.swiper.css",
		"/Users/joshua/Sites/android_geo/www/less/style.less",
		"/Users/joshua/Sites/netCanvas/js/idangerous.swiper-2.2.min.js",
		"/Users/joshua/Sites/netCanvas/js/kinetic-v4.5.0.min.js",
		"/Users/joshua/Sites/netCanvas/js/plugins.js",
		"/Users/joshua/Sites/netCanvas/css/main.css",
		"/Users/joshua/Sites/netCanvas/index_kinetic.html",
		"/Users/joshua/Sites/Android/Geographies_of_the_World's_Knowledge/assets/www/css/style.css",
		"/Users/joshua/Sites/Android/Geographies_of_the_World's_Knowledge/assets/www/index.html",
		"/Volumes/www/wordpress/wp-config.php",
		"/Users/joshua/Sites/Android/Geographies_of_the_World's_Knowledge/assets/www/js/swipe.min.js",
		"/Users/joshua/Sites/bookjs/example1.html",
		"/Users/joshua/Sites/isigma.js/test/index.html",
		"/Users/joshua/Sites/networkcanvas/index.html",
		"/Users/joshua/Sites/vis_portal/submissionform/index.html",
		"/Users/joshua/Desktop/hyper_island_text",
		"/Users/joshua/Desktop/Facebook App_SDuguay/index.php",
		"/Users/joshua/Sites/InteractiveVis/network/config_ukgov.json",
		"/Users/joshua/Sites/sigma.js/src/core/plotter.js",
		"/Users/joshua/Sites/sigma.js/src/core/sigma.js",
		"/Users/joshua/Sites/sigma.js/src/core/graph.js",
		"/Users/joshua/Sites/sigma.js/src/sigmaintro.js",
		"/Users/joshua/Downloads/Joshua R. Melville_1348599833.json",
		"/Users/joshua/Desktop/Joshua R. Melville_1349232695.graphml",
		"/Users/joshua/Sites/InteractiveVis/network/css/style.css",
		"/Users/joshua/Sites/InteractiveVis/network/js/sigma/sigma.parseGexf.js",
		"/Users/joshua/Sites/InteractiveVis/network/js/excanvas.js",
		"/Users/joshua/Sites/InteractiveVis/map/js/main.js",
		"/Users/joshua/Sites/InteractiveVis/colorbrewer.css",
		"/Users/joshua/Sites/InteractiveVis/network/ukgov_config.json",
		"/Applications/TeX/LuaTeX-and-XeTeX/XeTeX-2.tex",
		"/Users/joshua/Sites/gltail/config.yaml",
		"/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/Headers/DiskSpaceRecovery.h",
		"/Users/joshua/Sites/InteractiveVis/network/index.html",
		"/Users/joshua/Sites/wordpress/wp-load.php",
		"/Users/joshua/Desktop/namegen_iit/README.md"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"saveGraph",
			"save",
			"addedge",
			"add edge",
			"edgecreate",
			"addedge",
			"savegraph",
			"from",
			"addtolo",
			"load",
			"loadgraph",
			"getItem",
			"load",
			"loac",
			"nodes",
			"load",
			"init",
			"ettings",
			"NetCan",
			"addEdge",
			"app",
			"modal",
			"menu",
			"draw",
			"modal",
			"selectedNodes",
			"edgeTemp",
			"console.log",
			"addedge",
			"edges",
			"==",
			"edges",
			"}\n",
			"alreadyExists",
			"addNode",
			"1",
			"concentri",
			"label",
			"modal",
			"link",
			"weight",
			"modal",
			"{multitouch : true}",
			"container",
			"{multitouch : true}",
			"stage",
			"one touch",
			"for now",
			"get",
			"multitouch",
			"DRAGMOVE",
			"dd.node",
			"dd.isDragging",
			"_drag",
			"dd.is",
			"dd.node",
			"drag",
			"dd.node",
			" if(!dd.isDragging) {",
			"+",
			"DD",
			"ui",
			"thresh",
			"save",
			"700",
			"easeInOutQuint",
			"    \n",
			"underline",
			"hover",
			"menu",
			"ui",
			"getsimpleedges",
			"addedge",
			"index",
			"edges",
			",\n",
			"name",
			"index",
			"namething",
			"value.attrs.id",
			"'current'",
			"[i]",
			"opacity",
			"initkin",
			"donoti",
			"colour",
			"number",
			"=",
			"var ",
			"anchor",
			"Label",
			"label",
			"Label",
			"label",
			"shape",
			"anchor",
			"nodeOrigin",
			"var ",
			"dragNode",
			"update",
			"anim",
			"var",
			"updateedgeposition",
			"fixpages",
			"handle",
			"randomx",
			"randomy",
			"        ",
			"preventde",
			"hidden-error",
			"getnamed",
			"nodeorigin",
			"stage",
			"changem",
			"changemo",
			");\">",
			"offset",
			"nodeRadius",
			"entypo",
			"drawcircles",
			"updateDottedLines",
			"bitmap",
			"    height: 900px;",
			"textRadios",
			">\n",
			"3",
			"optionsRadios",
			"education"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "less/style.less",
					"settings":
					{
						"buffer_size": 2852,
						"regions":
						{
						},
						"selection":
						[
							[
								2167,
								2167
							]
						],
						"settings":
						{
							"syntax": "Packages/LESS/LESS.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1291.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "less/variables.less",
					"settings":
					{
						"buffer_size": 25428,
						"regions":
						{
						},
						"selection":
						[
							[
								18542,
								18547
							]
						],
						"settings":
						{
							"syntax": "Packages/LESS/LESS.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2418.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "index.html",
					"settings":
					{
						"buffer_size": 3850,
						"regions":
						{
						},
						"selection":
						[
							[
								940,
								940
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "js/main.js",
					"settings":
					{
						"buffer_size": 2355,
						"regions":
						{
						},
						"selection":
						[
							[
								1138,
								1138
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 749.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "js/NetworkCanvas.js",
					"settings":
					{
						"buffer_size": 15948,
						"regions":
						{
						},
						"selection":
						[
							[
								11494,
								11373
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6148.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/joshua/Sites/anotherverse/index.html",
					"settings":
					{
						"buffer_size": 11,
						"regions":
						{
						},
						"selection":
						[
							[
								11,
								11
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Applications/MAMP/htdocs/wp-content/themes/GeoNetTheme/mapping-page.php",
					"settings":
					{
						"buffer_size": 1991,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/PHP/PHP.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"cs",
				"css/main.css"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 264.0,
	"status_bar_visible": true
}
